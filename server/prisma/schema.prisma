// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int            @id @default(autoincrement())
  username  String         @unique
  password  String
  role      Int
  nickName  String
  enabled   Boolean        @default(true)
  createdAt DateTime       @default(now())
  oders     Order[]
  Restocks  RestockOrder[]
}

model Product {
  id           Int                     @id @default(autoincrement())
  barcode      String                  @unique
  name         String                  @unique
  price        Float
  cost         Float
  oderItems    ProductOnOrder[]
  quantity     Int
  enabled      Boolean                 @default(true)
  restockItems ProductOnRestockOrder[]
}

model Order {
  id        Int              @id @default(autoincrement())
  products  ProductOnOrder[]
  createdAt DateTime         @default(now())
  Users     Users            @relation(fields: [sellerId], references: [id])
  PayBy     String
  total   Float?
  sellerId  Int
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  priceAt   Float
  costAt    Float
  nameAt    String
  quantity  Int
}

model RestockOrder {
  id                     Int                     @id @default(autoincrement())
  restockby              Users                   @relation(fields: [restockbyId], references: [id])
  restockbyId            Int
  img                    String
  createdAt              DateTime                @default(now())
  ProductOnRestockOrders ProductOnRestockOrder[]
}

model ProductOnRestockOrder {
  id             Int          @id @default(autoincrement())
  RestockOrder   RestockOrder @relation(fields: [restockOrderId], references: [id], onDelete: Cascade)
  restockOrderId Int
  Product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
  priceAt        Float
  nameAt         String
  quantity       Int
}
